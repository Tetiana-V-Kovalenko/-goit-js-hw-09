{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,GADOC,SAASC,cAAc,SACjBD,SAASC,cAAc,wBACpCC,EAAYF,SAASC,cAAc,uBACnCE,EAASH,SAASC,cAAc,wBAChCG,EAAYJ,SAASC,cAAc,UAyBzC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAjCPQ,QAAQC,IAAIb,GAEZC,EAAUa,iBAAiB,SAAS,SAAAC,GAClCA,EAAIC,iBACJJ,QAAQC,IAAIjB,EAAWqB,MAAOlB,EAAUkB,OACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAOiB,MAAOC,IAAK,CACrC,IAAIC,EAAQC,OAAOxB,EAAWqB,OAASC,EAAIE,OAAOrB,EAAUkB,OAC5DL,QAAQC,IAAIM,GACZjB,EAAcgB,EAAI,EAAGC,GAClBE,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAIjDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAuCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\" ]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btnSubmit = document.querySelector('button');\nconsole.log(amount);\n\nbtnSubmit.addEventListener('click', evt => {\n  evt.preventDefault();\n  console.log(firstDelay.value, delayStep.value);\n  for (let i = 0; i < amount.value; i++) {\n    let delay = Number(firstDelay.value) + i * Number(delayStep.value);\n    console.log(delay);\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$btnSubmit","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","addEventListener","evt","preventDefault","value","i","delay1","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c92ebcf4.js.map"}